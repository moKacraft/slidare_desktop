/*
* Projet Slidare
* Sharing anywhere, anytime
*
*/
package service;

/**
 *	The exchange between the API and the slidare desktop can be done by the API Manager
 *
 * @author Flavien Maillot "flavien.maillot@epitech.eu"
 * @todo Get dynamicaly the DNS
 */
public class APIManager implements iService
{
    private final ClientManager client;
    
    private boolean error;
    
    private	int code;
    
    private	String response;
    
    public APIManager()
    {
        this.client = (ClientManager) ServiceFactory.getClientManager();
    }
    
    /**
     * Last code getted by the APIManager
     *
     * @return code HTTP return by the server
     */
    public int getLastCode()
    {
        return (this.code);
    }
    
    /**
     * Last string response getted by the APIManager
     *
     * @return string return by the server
     */
    public String getLastResponse()
    {
        return (this.response);
    }
    
    /**
     * If the last call failled or not
     *
     * @return status of the last call
     */
    public boolean inError()
    {
        return (this.error);
    }
    
    /**
     * Identification of the user on the server.
     *
     * toke	n(this token is generated by the API and will be used to authentify the user to requests that needs to be authentified), id(unique identifier generated by the API for the USER)
     *
     * @param obj JSON to put in POST
     * @return json : token, id
     */
    public boolean loginUser(String obj)
    {
		this.error = false;
        try
        {
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/loginUser")
                    .setBody(obj)
                    .buildAndExecutePost();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
    }
    
    public boolean userContacts(String token)
    {
		this.error = false;
        try
        {
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/userContacts")
                    .setHeader("Authorization", "Bearer " + token)
                    .buildAndExecuteGet();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
    }
	
	public boolean addContact(String token, String obj)
    {
		this.error = false;
        try
        {
            
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/addContact")
                    .setHeader("Authorization", "Bearer " + token)
                    .setBody(obj)
                    .buildAndExecutePost();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
    }
	 
	public boolean removeContact(String token, String obj)
    {
		this.error = false;
        try
        {
            
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/removeContactByEmail/" + obj)
                    .setHeader("Authorization", "Bearer " + token)
//                    .setBody(obj)
                    .buildAndExecuteDelete();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
    }
        
    public boolean userContact(String token, String id)
    {
		this.error = false;
        try
        {
            
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/userContact/"+id)
                    .setHeader("Authorization", "Bearer " + token)
                    .buildAndExecuteGet();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
    }
    
    /**
     * Create a user for the slidare app
     *
     * @param obj JSON to use in request
     * @return boolean
     */
    public boolean createUser(String obj)
    {
		this.error = false;
        try
        {
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/createUser")
                    .setBody(obj)
                    .buildAndExecutePost();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
    }
    
    /**
     * Save the entity account on the server
     *
     * @param obj JSON to use in request
     * @return boolean
     */
    public boolean saveAccount(String obj)
    {
        this.error = true;
        return (false);
    }
    
    /**
     * Load the entity account from the server
     *
     * @return boolean
     */
    public boolean loadAccount()
    {
        this.error = true;
        return (false);
    }
    
    /**
     * Save the contact list on the server
     *
     * @param obj JSON to use in request
     * @return boolean
     */
    public boolean saveContacts(String obj)
    {
        this.error = true;
        return (false);
    }
    
    /**
     * Load the contact list on the server
     *
     * @return boolean
     */
    public boolean loadContacts()
    {
//        try
//        {
//            this.client.getHttpClientService()
//                    .init()
//                    .setUrl("http://34.227.142.101:50000/userContact")
//                    .setBody()
//                    .buildAndExecutePost();
//            this.code = this.client.getHttpClientService().getReponseCode();
//            this.response = this.client.getHttpClientService().getResponseBody();
//            if (code != 200)
//            {
//                this.error = true;
//            }
//            return (!this.error);
//        }
//        catch (Exception e)
//        {
//            return (false);
//        }
            this.error = true;
            return (!this.error);
    }
    
    /**
     * Search some contacts on the server by firstname, lastname, email or other. Get a list of contacts.
     *
     * @param obj JSON to use in request
     * @return boolean
     */
    public boolean searchContacts(String obj)
    {
        this.error = true;
        return (false);
    }
    
    /**
     * Save the group list on the server
     *
     * @param obj JSON to use in request
     * @return boolean
     */
    public boolean saveGroups(String obj)
    {
        this.error = true;
        return (false);
    }
    
	/**
	 * 
	 * @param token
	 * @return 
	 */
	public boolean fetchGroups(String token)
	{
		this.error = true;
		this.error = false;
        try
        {
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/fetchGroups")
                    .setHeader("Authorization", "Bearer " + token)
                    .buildAndExecuteGet();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
	}
	
	public boolean fetchUser(String token)
	{
		this.error = false;
        try
        {
            this.client.getHttpClientService()
                    .init()
                    .setUrl("http://34.227.142.101:50000/fetchUser")
                    .setHeader("Authorization", "Bearer " + token)
                    .buildAndExecuteGet();
            this.code = this.client.getHttpClientService().getReponseCode();
            this.response = this.client.getHttpClientService().getResponseBody();
            if (code != 200)
            {
                this.error = true;
            }
            return (!this.error);
        }
        catch (Exception e)
        {
            return (false);
        }
	}
	
    /**
     * Load the group list on the server
     *
//	 * @param token
     * @return boolean
     */
    public boolean loadGroups()
    {
		
//        this.error = true;
//		this.error = false;
//        try
//        {
//            this.client.getHttpClientService()
//                    .init()
//                    .setUrl("http://34.227.142.101:50000/fetchGroups")
//                    .setHeader("Authorization", "Bearer " + token)
//                    .buildAndExecuteGet();
//            this.code = this.client.getHttpClientService().getReponseCode();
//            this.response = this.client.getHttpClientService().getResponseBody();
//            if (code != 200)
//            {
//                this.error = true;
//            }
//            return (!this.error);
//        }
//        catch (Exception e)
//        {
//            return (false);
//        }
        return (false);
    }
}
